#!/usr/bin/env perl
#
# This script will find all the JS and CSS files under the FMS web/ directory,
# and copy them to a collected_static directory with a content hash added to
# each filename just before the suffix.

use v5.14;
use warnings;
use Digest::MD5;
use Encode qw(encode_utf8);
use File::Basename qw(fileparse);
use File::Copy qw(copy);
use File::Find::Rule;
use File::Path qw(make_path);

use FixMyStreet::Cobrand;
use FixMyStreet::Template::JS;
use Path::Tiny;

my $ROOT = '.';
my $OUT = "../data/collected_static/";

my @files = File::Find::Rule
    ->file
    ->name('*.js', '*.css', '*.css.map')
    ->in("$ROOT/web/");

# This file is loaded relative to the OpenLayers JavaScript, so include and copy without hash
my $ol_png = 'web/vendor/OpenLayers/img/cloud-popup-relative.png';
push @files, $ol_png;

foreach (@files) {
    say "Looking at $_";
    my $hash = _version_get_details($_);
    my $out = get_location($_, $hash);
    copy($_, $out) or die "Failed to copy $_ to $out: $!";
}

# And the dynamically generated files as well!
my $file = "js/asset_layers";
foreach my $cobrand (map { $_->{moniker} } FixMyStreet::Cobrand->available_cobrand_classes) {
    say "Looking at asset layers for $cobrand";
    my $layers = FixMyStreet::Template::JS::pick_asset_layers($cobrand);
    my $output = _template("$file.html", { asset_layers => $layers });
    my $hash = "$cobrand.";
    $hash .= _version_get_details("templates/web/base/$file.html");
    $hash .= _version_get_details('conf/general.yml');
    my $out = get_location("$file.js", $hash);
    path($out)->spew_utf8($output);
}

# Translation files
$file = "js/translation_strings";
my $cls = FixMyStreet::Cobrand::Default->new;
foreach my $langcfg (@{$cls->languages}) {
    my ($lang, $verbose, $locale) = split /,/, $langcfg;
    say "Looking at translation $lang";
    $cls->set_lang_and_domain($lang, 1, FixMyStreet->path_to('locale')->stringify);
    my $output = _template("$file.html");
    my $hash = "$lang.";
    $hash .= _version_get_details("templates/web/base/$file.html");
    if ($lang ne 'en-gb') {
        $hash .= _version_get_details("locale/$locale.UTF-8/LC_MESSAGES/FixMyStreet.po");
    }
    my $out = get_location("$file.js", $hash);
    path($out)->spew_utf8($output);
}

# ---

sub _template {
    my ($template, $vars) = @_;
    my $tt = FixMyStreet::Template->new({ INCLUDE_PATH => [ 'templates/web/base' ] });
    my $output;
    $tt->process($template, $vars, \$output);
    return $output;
}

# Similar to the function in FixMyStreet::App::View::Web
sub _version_get_details {
    my $path = shift;

    # We want to copy this one file without a hash
    return "" if $path eq $ol_png;
    # Or if it is a CSS map (which we will only have the latest of)
    return "" if $path =~ /\.css\.map$/;

    open (my $fh, '<', $path) or die "$path does not exist: $!";
    binmode $fh;
    my $digest = Digest::MD5->new->addfile($fh)->hexdigest;
    close $fh;
    return substr($digest, 0, 12);
}

sub get_location {
    my ($file, $hash) = @_;
    my ($name, $path, $suffix) = fileparse($file, qr/\.css/, qr/\.js/);
    $path =~ s{^web/}{};
    my $out_dir = "$OUT$path";
    my $out_name = "$name.$hash$suffix";
    my $out = "$out_dir$out_name";
    make_path($out_dir);
    return $out;
}
